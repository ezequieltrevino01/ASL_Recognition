# -*- coding: utf-8 -*-
"""ASL_CNN_Final.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1IGglcyuOd3IzouURZ3WB70e0bYf6vw2i
"""

from google.colab import drive
drive.mount('/content/drive')

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns

train = pd.read_csv('/content/drive/MyDrive/AI/datasets/asl/sign_mnist_train.csv')
test = pd.read_csv('/content/drive/MyDrive/AI/datasets/asl/sign_mnist_test.csv')

labels = train['label'].values

train.drop('label', axis = 1, inplace = True)

images = train.values
images = np.array([np.reshape(i, (28, 28)) for i in images])
images = np.array([i.flatten() for i in images])

from sklearn.preprocessing import LabelBinarizer
label_binrizer = LabelBinarizer()
labels = label_binrizer.fit_transform(labels)

from sklearn.model_selection import train_test_split

x_train, x_test, y_train, y_test = train_test_split(images, labels, test_size = 0.2, random_state = None)

import keras
from keras.models import Sequential
from keras.layers import Dense, Conv2D, MaxPooling2D, Flatten, Dropout

batch_size = 128
num_classes = 24
epochs = 50

#Normalizing
x_train = x_train / 255
x_test = x_test / 255

x_train = x_train.reshape(x_train.shape[0], 28, 28, 1)
x_test = x_test.reshape(x_test.shape[0], 28, 28, 1)

#model architecture       
model = Sequential()

model.add(Conv2D(24, kernel_size=(5, 5), activation = 'relu', input_shape=(28, 28, 1) ))  
model.add(MaxPooling2D(pool_size = (2, 2), strides = (2,2), padding = 'same' ))
model.add(Dropout(0.1))

model.add(Conv2D(32, kernel_size = (3, 3), activation = 'relu'))  
model.add(Conv2D(64, kernel_size = (3, 3), activation = 'relu'))  
model.add(MaxPooling2D(pool_size = (2, 2) ))
model.add(Dropout(0.2))

model.add(Conv2D(64, kernel_size = (3, 3), activation = 'relu')) 
model.add(MaxPooling2D(pool_size = (2, 2) ))
model.add(Dropout(0.1))

model.add(Flatten())
model.add(Dense(128, activation = 'relu'))
model.add(Dense(64, activation = 'relu'))
model.add(Dropout(0.17))

model.add(Dense(num_classes, activation = 'softmax'))

model.summary()

model.compile(loss = keras.losses.categorical_crossentropy, optimizer=keras.optimizers.Adam(),
             metrics=['accuracy'])

history = model.fit(x_train, y_train, validation_data = (x_test, y_test), epochs=epochs, batch_size=batch_size)

plt.plot(history.history['loss'])
plt.plot(history.history['val_loss'])
plt.title("Training and Validation Loss")
plt.xlabel('epoch')
plt.ylabel('accuracy')
plt.legend(['train','test'])

plt.show()

plt.plot(history.history['accuracy'])
plt.plot(history.history['val_accuracy'])
plt.title("Training and Validation Accuracy")
plt.xlabel('epoch')
plt.ylabel('accuracy')
plt.legend(['train','test'])

plt.show()

test_labels = test['label']

test.drop('label', axis = 1, inplace = True)

test_images = test.values
test_images = np.array([np.reshape(i, (28, 28)) for i in test_images])
test_images = np.array([i.flatten() for i in test_images])

test_labels = label_binrizer.fit_transform(test_labels)

test_images = test_images.reshape(test_images.shape[0], 28, 28, 1)

y_pred = model.predict(test_images)

from sklearn.metrics import accuracy_score

accuracy_score(test_labels, y_pred.round())